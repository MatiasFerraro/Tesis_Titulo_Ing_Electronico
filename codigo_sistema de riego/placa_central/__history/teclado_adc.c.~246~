/////////////TECLADO/////////////
int valor_adc_leido=0;
int valor_adc_tecla_presionada;
char tecla;
int bandera_presionada,i;
int r,Indice;
//const int16 valores_adc_teclas[17]={0,310,318,329,339,445,460,486,508,551,574,614,650,698,736,803,865};//valores teoricos
const int valores_adc_teclas[17]={0,308,314,326,335,540,476,796,635,432,445,470,483,680,713,802,833};//valores practicos
const char simbolo_tecla[17]={'Z','C','D','E','F','B','3','6','9','A','2','5','8','0','1','4','7'};
const int tolerancia=5;
int max_tecla=16;
const int INIT      = 0;
const int SUELTA    = 1;
const int VALIDA    = 2;
const int PRESIONA  = 3;
int estado_siguiente_maquina_teclado=0;
////////////TECLADO//////////////
void tarea_teclado_analogico(void){
switch(estado_siguiente_maquina_teclado)
{
case INIT:
  int i,max=16;
  setup_adc_ports(AN0|VSS_VDD); 
  delay_ms(2);
 // setup_adc(ADC_CLOCK_INTERNAL); 
  setup_adc(ADC_CLOCK_DIV_8);
  enable_interrupts(global);
  bandera_presionada=0;
  estado_siguiente_maquina_teclado=SUELTA;
break;
case SUELTA:
 valor_adc_leido=0; 
  set_adc_channel(0); //habilitacion canal 0
  delay_ms(2);
 
 valor_adc_leido =read_adc(); 
 
lcd_gotoxy(1,1);
printf(lcd_putc,"%u",valor_adc_leido); 
 max=16;
 if((valor_adc_leido>100)&&(bandera_presionada==0))
  {
    bandera_presionada=1;
    estado_siguiente_maquina_teclado=PRESIONA;
    valor_adc_tecla_presionada=valor_adc_leido;
  }
break;
case PRESIONA:
 valor_adc_leido=0; 
  set_adc_channel(0); //habilitacion canal 0
  delay_ms(2);
 valor_adc_leido =read_adc(); 
  
 if((bandera_presionada==1)&&(valor_adc_leido<10))
 estado_siguiente_maquina_teclado=VALIDA;
break;
case VALIDA:
    max=max_tecla;
    for(i=0;i<=max;i++)
    {
     if((valor_adc_tecla_presionada>(valores_adc_teclas[i]-tolerancia)) && (valor_adc_tecla_presionada<(valores_adc_teclas[i]+tolerancia)))
     { 
       max=i;
       tecla=simbolo_tecla[i]; 
      lcd_gotoxy(4,2);
       lcd_putc(tecla);
     }  
    }
    if (i>=max_tecla) tecla='Z';   
bandera_presionada=0;
estado_siguiente_maquina_teclado=SUELTA;
break;
}}
